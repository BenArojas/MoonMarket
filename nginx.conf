# Use the number of available CPU cores for worker processes
worker_processes auto;
pid /run/nginx.pid;

# Increase if handling many simultaneous connections and system limits allow
events {
    worker_connections 1024; # Increased from 768, adjust based on load/resources
}

http {
    # Log to stdout/stderr for easy Docker logging
    access_log /dev/stdout;
    error_log /dev/stderr info; # Log informational messages too for debugging startup/config

    # Set client body size limit if needed (e.g., for file uploads via API)
    # client_max_body_size 16m;

    # Hide Nginx version in headers
    server_tokens off;

    # Include standard mime types
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # ===== Compression Settings =====
    # Enable dynamic Gzip compression
    gzip on;
    gzip_vary on; # Adds 'Vary: Accept-Encoding' header
    gzip_proxied any; # Compress for all proxied requests
    gzip_comp_level 6; # Good balance (1-9)
    gzip_min_length 256; # Don't compress very small files
    gzip_types # Specify types to compress
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/json
        application/xml
        application/rss+xml
        application/atom+xml
        image/svg+xml
        font/otf
        font/ttf
        font/eot;

    # --- IMPORTANT: Serve pre-compressed Gzip files ---
    # If vite-plugin-compression generates .gz files, Nginx will serve them directly
    gzip_static on;

    # --- OPTIONAL: Brotli Compression (Offers better compression than Gzip) ---
    # Requires ngx_brotli module (often included in official Nginx images)
    # Uncomment if you generate .br files with vite-plugin-compression and module is available
    # brotli on;
    # brotli_comp_level 6; # Brotli compression level (1-11)
    # brotli_static on;   # Serve pre-compressed .br files if they exist
    # brotli_types       # Same types as gzip, or adjust as needed
    #     text/plain
    #     text/css
    #     text/xml
    #     text/javascript
    #     application/javascript
    #     application/json
    #     application/xml
    #     application/rss+xml
    #     application/atom+xml
    #     image/svg+xml
    #     font/otf
    #     font/ttf
    #     font/eot;


    server {
        # Listen on port 80, enable HTTP/2 if desired (usually used with HTTPS)
        listen 80;
        # listen 80 http2; # Uncomment if you want HTTP/2 on port 80

        # Set the root for static files (matches Dockerfile COPY destination)
        root /app/static;
        index index.html;

        # ===== Security Headers =====
        add_header X-Frame-Options "SAMEORIGIN" always;
        add_header X-Content-Type-Options "nosniff" always;
        add_header Referrer-Policy "strict-origin-when-cross-origin" always;
        add_header Permissions-Policy "geolocation=(), microphone=(), camera=()" always;
        # Content-Security-Policy is highly recommended but needs careful tuning:
        # add_header Content-Security-Policy "default-src 'self'; script-src 'self'; style-src 'self' 'unsafe-inline'; img-src 'self' data:; font-src 'self'; connect-src 'self' http://127.0.0.1:8000;" always;


        # ===== Caching Strategy =====
        # Rule 1: NEVER cache index.html itself - it's the entrypoint to new versions
        location = /index.html {
            # Tells browser/proxies to revalidate before using cached version
            add_header Cache-Control "no-cache, no-store, must-revalidate";
            expires -1; # Alternative way to prevent caching
        }

        # Rule 2: Aggressively cache assets with hashes in their filenames (immutable)
        # Vite adds hashes to JS, CSS, and potentially other assets like fonts/images
        # Match files within the 'assets' directory (Vite's default output dir)
        location /assets/ {
            add_header Cache-Control "public, max-age=31536000, immutable";
            expires 1y; # Set expires for older proxies/clients
        }

        # Rule 3: Serve other static files from root (e.g., favicon.ico, images in public dir)
        # Apply moderate caching - adjust max-age as needed
        location ~* \.(?:jpg|jpeg|gif|png|ico|svg|webp|woff|woff2|ttf|eot)$ {
             add_header Cache-Control "public, max-age=86400"; # Cache for 1 day
             expires 1d;
        }

        # ===== SPA Routing & Static File Serving =====
        # Try to serve the requested file directly, otherwise fall back to index.html
        # This MUST come AFTER specific location blocks (like /assets/ or index.html)
        location / {
            try_files $uri $uri/ /index.html;
        }

        # ===== API Proxy =====
        location /api/ {
            proxy_pass http://127.0.0.1:8000; # Your backend service address

            # Standard proxy headers for backend to get client info
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # WebSocket support headers (if your API uses WebSockets)
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade"; # Note: 'upgrade' should be lowercase
            proxy_cache_bypass $http_upgrade;

            # Optional: Increase proxy timeouts if needed
            # proxy_connect_timeout 60s;
            # proxy_send_timeout   60s;
            # proxy_read_timeout   60s;
        }

        # Optional: Deny access to hidden files (e.g., .git, .env) if they somehow end up in root
        location ~ /\. {
            deny all;
        }
    }
}