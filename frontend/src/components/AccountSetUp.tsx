import React, { useState } from 'react';
import {
    AlertDialog,
    AlertDialogAction,
    AlertDialogContent,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogHeader,
    AlertDialogTitle,
} from '@/components/ui/alert-dialog';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Loader2, Rocket, KeyRound, PercentSquare } from 'lucide-react'; // Added icons
import { addApiKey } from '@/api/user'; // Assuming this can handle { apiKey?, taxRate, accountType }
import { useMutation, useQueryClient, useQuery } from '@tanstack/react-query';
import { toast } from 'react-toastify';
import { useUser } from '@/contexts/UserContext';

interface AccountSetUpProps {
    isOpen: boolean;
    onClose: () => void;
}


const AccountSetUp: React.FC<AccountSetUpProps> = ({ isOpen, onClose }) => {
    const [step, setStep] = useState<number>(1);
    const [apiProvider, setApiProvider] = useState<'fmp' | 'ibkr' | null>(null);
    const [apiKey, setApiKey] = useState<string>('');
    const [taxRate, setTaxRate] = useState<string>('');
    const queryClient = useQueryClient();
    const userData = useUser();


    // const isIbkrSuccessfullyConnected = userData?.ibkr_is_connected === true;

    const { mutate: submitAccountSetupMutation, isPending } = useMutation({
        mutationFn: (data: { apiKey?: string; taxRate: number; api_provider: 'fmp' | 'ibkr' }) => addApiKey(data), // Adjust addApiKey to accept accountType
        onSuccess: () => {
            queryClient.invalidateQueries({ queryKey: ["authStatus"] });
            toast.success("Cosmic configuration complete! Your settings are saved.");
            onClose(); // Close modal on final success
            // Reset state for next time modal opens
            setTimeout(() => { // Timeout to allow modal to close before resetting
                setStep(1);
                setApiProvider(null);
                setApiKey('');
                setTaxRate('');
            }, 300);
        },
        onError: (error: any) => {
            toast.error(error?.message || "A cosmic anomaly occurred. Please try again.");
        },
    });

    const handleAccountTypeSelect = (type: 'fmp' | 'ibkr') => {
        setApiProvider(type);
        setStep(2);
    };

    const handleFmpApiSubmit = () => {
        if (apiKey.length === 32) {
            setStep(3); // Move to tax rate step
        } else {
            toast.warn("Your FMP API Key must be a 32-character artifact!");
        }
    };

    // const handleInitiateIbkrOAuth = () => {
    //     // This URL should ideally be generated by your backend or from a secure config
    //     // It includes your client_id, redirect_uri, scopes, etc.
    //     // Example: const ibkrOAuthUrl = 'https://www.interactivebrokers.com/sso/oauth?client_id=YOUR_CLIENT_ID&redirect_uri=YOUR_BACKEND_CALLBACK_URL&response_type=code&scope=openid profile account_read';
    //     const ibkrOAuthUrl = `https://your-backend.com/api/auth/ibkr/initiate`; // Or directly to IBKR if your backend callback handles it

    //     toast.info("Prepare for warp speed! Redirecting to Interactive Brokers for authentication...");
    //     // Redirect the user to IBKR's OAuth page
    //     window.location.href = ibkrOAuthUrl;
    //     // After redirection, the user will authenticate on IBKR's site.
    //     // IBKR will then redirect back to your specified `redirect_uri`.
    //     // Your backend handles the code exchange for tokens at that `redirect_uri`.
    //     // The `authStatus` query should then reflect `isIbkrConnected: true`.
    // };

    // const handleProceedFromIbkr = () => {
    //     if (isIbkrSuccessfullyConnected) {
    //         setStep(3); // Move to tax rate step
    //     } else {
    //         toast.error("IBKR Astrogation incomplete. Please ensure you've authorized MoonMarket on IBKR or try reconnecting.");
    //     }
    // };

    const handleSubmitFinal = () => {
        if (!taxRate || parseFloat(taxRate) < 0 || parseFloat(taxRate) > 100) {
            toast.warn("Please enter a valid galactic tax rate (0-100%).");
            return;
        }
        if (!apiProvider) {
            toast.error("Account type not selected. Please restart the stargate sequence.");
            return;
        }

        submitAccountSetupMutation({
            apiKey: apiProvider === 'fmp' ? apiKey : undefined, // Only send apiKey if FMP
            taxRate: parseFloat(taxRate),
            api_provider: apiProvider,
        });
    };

    const renderStepContent = () => {
        switch (step) {
            case 1: // Choose Account Type
                return (
                    <>
                        <AlertDialogHeader>
                            <AlertDialogTitle className="flex items-center"><Rocket className="mr-2 h-6 w-6 text-customTurquoise-400" />Choose Your Spacecraft!</AlertDialogTitle>
                            <AlertDialogDescription className="text-sm space-y-2">
                                <p>Welcome, Stargazer, to the MoonMarket Nebula!</p>
                                <p>To navigate these financial cosmos, please select your preferred data spacecraft:</p>
                            </AlertDialogDescription>
                        </AlertDialogHeader>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 my-4">
                            <Button
                                onClick={() => handleAccountTypeSelect('ibkr')}
                                className="w-full h-24 flex flex-col items-center justify-center bg-blue-600 hover:bg-blue-700 text-white transition-all duration-300 ease-in-out transform hover:scale-105"
                                variant="default"
                            >
                                <Rocket className="h-8 w-8 mb-2" />
                                Connect IBKR Account
                                <span className="text-xs mt-1">(Direct Hyperspace Link)</span>
                            </Button>
                            <Button
                                onClick={() => handleAccountTypeSelect('fmp')}
                                className="w-full h-24 flex flex-col items-center justify-center bg-purple-600 hover:bg-purple-700 text-white transition-all duration-300 ease-in-out transform hover:scale-105"
                                variant="default"
                            >
                                <KeyRound className="h-8 w-8 mb-2" />
                                Use FMP API Key
                                <span className="text-xs mt-1">(Manual Entry Protocol)</span>
                            </Button>
                        </div>

                    </>
                );

            case 2: // Account-specific setup
                if (apiProvider === 'fmp') {
                    return ( // FMP API Key Step
                        <>
                            <AlertDialogHeader>
                                <AlertDialogTitle className="flex items-center"><KeyRound className="mr-2 h-6 w-6 text-customTurquoise-400" />FMP Stellar Credentials</AlertDialogTitle>
                                <AlertDialogDescription className="text-sm space-y-2">
                                    <p>Greetings, Earthling! You've chosen the FMP (Financial Modeling Prep) datastream.</p>
                                    <p>To decode market signals, we need your FMP API key. It's like your personal star chart!</p>
                                    <p>Your mission, should you choose to accept it:</p>
                                    <ol className="list-decimal list-inside ml-4 space-y-1">
                                        <li>Launch your browser to <a href="https://site.financialmodelingprep.com/register" target="_blank" rel="noopener noreferrer" className="text-customTurquoise-400 hover:underline">FMP's registration portal</a>.</li>
                                        <li>Establish your FMP account (if you haven't already).</li>
                                        <li>Navigate to your FMP mission dashboard.</li>
                                        <li>Secure your unique 32-character API key.</li>
                                    </ol>
                                    <p>May your data be plentiful and your insights profound!</p>
                                </AlertDialogDescription>
                            </AlertDialogHeader>
                            <Input
                                value={apiKey}
                                onChange={(e) => setApiKey(e.target.value)}
                                placeholder="Enter your 32-character FMP API key"
                                maxLength={32}
                                className="bg-background text-foreground border-customTurquoise-400 focus:ring-2 focus:ring-customTurquoise-400 focus:border-customTurquoise-400 hover:border-customTurquoise-400 transition-colors my-4"
                            />
                            <AlertDialogFooter>
                                <Button variant="outline" onClick={() => setStep(1)} className="hover:border-customTurquoise-400/50">Back to Spacecraft Selection</Button>
                                <AlertDialogAction asChild>
                                    <Button
                                        onClick={handleFmpApiSubmit}
                                        disabled={apiKey.length !== 32}
                                        className="bg-customTurquoise-400 text-white hover:bg-customTurquoise-400/80"
                                    >
                                        Next: Set Parameters
                                    </Button>
                                </AlertDialogAction>
                            </AlertDialogFooter>
                        </>
                    );
                } else if (apiProvider === 'ibkr') {
                    const { mutate: verifyIbkrConnection, isPending: isVerifying } = useMutation({
                        mutationFn: () => fetch('/api/auth/ibkr/verify', { credentials: 'include' }).then(res => res.json()),
                        onSuccess: (data) => {
                            if (data.isAuthenticated) {
                                setStep(3); // Move to tax rate step
                                toast.success("IBKR connection verified! Ready for tax setup.");
                            } else {
                                toast.error("IBKR login not detected. Please log in via the Gateway.");
                            }
                        },
                        onError: () => {
                            toast.error("Failed to verify IBKR connection. Please try again.");
                        },
                    });

                    return (
                        <>
                            <AlertDialogHeader>
                                <AlertDialogTitle className="flex items-center">
                                    <Rocket className="mr-2 h-6 w-6 text-customTurquoise-400" />
                                    Connect to Interactive Brokers
                                </AlertDialogTitle>
                                <AlertDialogDescription className="text-sm space-y-2">
                                    <p>You're connecting to Interactive Brokers via the Client Portal Gateway.</p>
                                    <p>Follow these steps to authenticate:</p>
                                    <ol className="list-decimal list-inside ml-4 space-y-1">
                                        <li>Log in with your Interactive Brokers credentials and complete two-factor authentication.</li>
                                        <li>Look for "Client login succeeds" in the browser.</li>
                                        <li>Return here and click "Verify Connection".</li>
                                    </ol>
                                </AlertDialogDescription>
                            </AlertDialogHeader>
                            <Button
                                onClick={() => window.open('https://localhost:5055', '_blank')}
                                className="w-full my-4 bg-blue-600 hover:bg-blue-700 text-white"
                            >
                                <Rocket className="mr-2 h-4 w-4" />
                                Open IBKR Gateway Login
                            </Button>
                            <Button
                                onClick={() => verifyIbkrConnection()}
                                disabled={isVerifying}
                                className="w-full my-4 bg-customTurquoise-400 hover:bg-customTurquoise-400/80 text-white"
                            >
                                {isVerifying ? (
                                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                ) : (
                                    <Rocket className="mr-2 h-4 w-4" />
                                )}
                                Verify Connection
                            </Button>
                            <AlertDialogFooter>
                                <Button
                                    variant="outline"
                                    onClick={() => setStep(1)}
                                    className="hover:border-customTurquoise-400/50"
                                >
                                    Back to Spacecraft Selection
                                </Button>
                            </AlertDialogFooter>
                        </>
                    );
                }
                return null;

            case 3: // Tax Rate and Final Submit
                return (
                    <>
                        <AlertDialogHeader>
                            <AlertDialogTitle className="flex items-center"><PercentSquare className="mr-2 h-6 w-6 text-customTurquoise-400" />Set Galactic Tax Parameters</AlertDialogTitle>
                            <AlertDialogDescription className="text-sm space-y-2">
                                <p>Final calibration, Commander!</p>
                                <p>Please declare your capital gains tax rate. This ensures your profit calculations are as precise as a targeted asteroid strike.</p>
                                <p>This rate will be used for calculating potential taxes on your realized gains within MoonMarket.</p>
                            </AlertDialogDescription>
                        </AlertDialogHeader>
                        <div className="space-y-4 my-4">
                            <div>
                                <label className="text-sm font-medium">Capital Gains Tax Rate (%)</label>
                                <Input
                                    type="number"
                                    value={taxRate}
                                    onChange={(e) => setTaxRate(e.target.value)}
                                    placeholder="e.g., 15 for 15%"
                                    min="0"
                                    max="100"
                                    step="0.01" // Allow for decimal tax rates
                                    className="bg-background text-foreground border-customTurquoise-400 focus:ring-2 focus:ring-customTurquoise-400 focus:border-customTurquoise-400 hover:border-customTurquoise-400 transition-colors"
                                />
                            </div>
                        </div>
                        <AlertDialogFooter className="space-x-2">
                            <Button
                                onClick={() => setStep(2)} // Go back to previous specific step
                                variant="outline"
                                className="border-customTurquoise-400 text-customTurquoise-400 hover:bg-customTurquoise-400/10"
                            >
                                Back
                            </Button>
                            <AlertDialogAction asChild>
                                <Button
                                    onClick={handleSubmitFinal}
                                    disabled={!taxRate || isPending || (apiProvider === 'fmp' && apiKey.length !== 32)}
                                    className="bg-customTurquoise-400 text-white hover:bg-customTurquoise-400/80 focus:ring-2 focus:ring-customTurquoise-400 focus:ring-offset-2 focus:ring-offset-background"
                                >
                                    {isPending ? (
                                        <>
                                            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                                            Finalizing Configuration...
                                        </>
                                    ) : (
                                        'Complete Setup & Launch!'
                                    )}
                                </Button>
                            </AlertDialogAction>
                        </AlertDialogFooter>
                    </>
                );
            default:
                return null;
        }
    };

    return (
        <AlertDialog open={isOpen} onOpenChange={(open) => !open && onClose()}> {/* Ensure onClose is called when dialog is dismissed */}
            <AlertDialogContent className="bg-background text-foreground max-w-lg">
                {renderStepContent()}
            </AlertDialogContent>
        </AlertDialog>
    );
};

export default AccountSetUp;