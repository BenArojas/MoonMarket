# prot.py
import asyncio
from typing import Protocol, Awaitable, Callable, Any, Dict, List, Optional
import httpx
from state import IBKRState
from models import AuthStatusDTO # <-- Add any models used in method signatures

class ServiceProtocol(Protocol):
    """
    The COMPLETE blueprint of the final IBKRService class.
    It includes signatures from the main class AND all mixins.
    """
    
    # --- Attributes from IBKRService.__init__ ---
    state: IBKRState
    http: httpx.AsyncClient
    _ws_task: Optional[asyncio.Task]
    _current_ws_account: Optional[str]
    _broadcast: Callable[[Dict[str, Any]], Awaitable[None]]

    # --- Core Method from IBKRService ---
    async def _req(self, method: str, ep: str, **kw) -> Any:
        ...

    # --- Methods from AuthMixin ---
    async def sso_validate(self) -> bool: ...
    async def tickle(self) -> bool: ...
    async def ensure_accounts(self) -> None: ...
    async def auth_status(self) -> dict: ...
    async def check_and_authenticate(self) -> AuthStatusDTO: ...
    async def logout(self) -> dict: ...

    # --- Methods from WebSocketHandlerMixin ---
    async def initialize_websocket_task(self, account_id: str) -> None: ...
    async def shutdown_websocket_task(self) -> None: ...
    async def handle_ws_command(self, command): ...
    async def _dispatch_book_data(self, msg ): ...
    async def _dispatch_ledger(self , msg ): ...
    async def _dispatch_pnl(self , msg ): ...
    async def _dispatch_chart_data(self , msg ): ...
    async def _dispatch_tick(self , msg ): ...
    async def _dispatch_active_stock_update(self , msg ): ...
    async def _ws_heartbeat(self): ...
    async def _websocket_loop(self, account_id): ...
    async def _process_ibkr_message(self, raw_message): ...
    async def _send_initial_allocation(self, account_id): ...
    async def _ws_allocation_refresher(self, account_id: str): ...

    
    
    # --- Methods from OrdersMixin ---
    async def get_live_orders(self) -> List[Dict[str, Any]]: ...
    
    # --- Methods from AccountMixin ---
    async def positions(self, account_id: str): ...
    async def account_allocation(self, account_id: str): ...
